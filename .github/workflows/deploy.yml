name: 띠메이트 배포

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  test:
    name: 테스트 실행
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: pnpm 설정
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 의존성 설치
        run: pnpm install --frozen-lockfile

      - name: 타입 체크
        run: pnpm run type-check

      - name: 린트 체크
        run: pnpm run lint --max-warnings=0 || true

      - name: 빌드 테스트
        run: pnpm run build

  build-and-deploy:
    name: 빌드 및 배포
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')

    env:
      NEXT_PUBLIC_KAKAO_KEY: ${{ secrets.NEXT_PUBLIC_KAKAO_KEY }}
      NEXT_PUBLIC_GOOGLE_ADSENSE_ID: ${{ secrets.NEXT_PUBLIC_GOOGLE_ADSENSE_ID }}
      NEXT_PUBLIC_GA_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_GA_MEASUREMENT_ID }}
      NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: pnpm 설정
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 의존성 설치
        run: pnpm install --frozen-lockfile

      - name: Next.js 빌드
        run: pnpm run build

      - name: 빌드 파일 패키징
        run: |
          # 필요한 파일만 패키징하여 업로드 속도 향상
          tar -czf ttimate-build.tar.gz \
            .next \
            public \
            package.json \
            pnpm-lock.yaml \
            next.config.ts \
            --exclude='.next/cache' \
            --exclude='node_modules'

      - name: SSH 키 설정
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: EC2 서버 준비
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # 애플리케이션 디렉토리 생성
            sudo mkdir -p /var/www/ttimate
            sudo chown -R $USER:$USER /var/www/ttimate
            
            # 백업 디렉토리 생성
            mkdir -p /var/www/ttimate/backup
            
            # 현재 실행 중인 앱 백업 (rollback용)
            if [ -d "/var/www/ttimate/current" ]; then
              cp -r /var/www/ttimate/current /var/www/ttimate/backup/$(date +%Y%m%d_%H%M%S)
              # 오래된 백업 정리 (최근 5개만 유지)
              ls -t /var/www/ttimate/backup/ | tail -n +6 | xargs -r rm -rf
            fi
          EOF

      - name: 빌드 파일 업로드
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no ttimate-build.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/ttimate/

      - name: EC2에서 배포 실행
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /var/www/ttimate
            
            # 새 버전 디렉토리 생성
            rm -rf new_version
            mkdir new_version
            
            # 빌드 파일 압축 해제
            tar -xzf ttimate-build.tar.gz -C new_version/
            rm ttimate-build.tar.gz
            
            # Node.js 환경 설정
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use 20 || nvm install 20
            
            # pnpm 설정
            corepack enable
            corepack prepare pnpm@9 --activate
            export PNPM_HOME="$HOME/.local/share/pnpm"
            export PATH="$PNPM_HOME:$PATH"
            
            # 새 버전에 의존성 설치 (운영용만)
            cd new_version
            pnpm install --prod --frozen-lockfile
            
            # 환경 변수 파일 생성
            cat > .env.local << 'ENVEOF'
            NEXT_PUBLIC_KAKAO_KEY=${{ secrets.NEXT_PUBLIC_KAKAO_KEY }}
            NEXT_PUBLIC_GOOGLE_ADSENSE_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_ADSENSE_ID }}
            NEXT_PUBLIC_GA_MEASUREMENT_ID=${{ secrets.NEXT_PUBLIC_GA_MEASUREMENT_ID }}
            NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}
            NODE_ENV=production
            PORT=3001
            ENVEOF
            
            cd /var/www/ttimate
            
            # PM2로 애플리케이션 관리
            pm2 delete ttimate 2>/dev/null || true
            
            # 심볼릭 링크 업데이트 (무중단 배포)
            rm -rf current
            mv new_version current
            
            # PM2로 새 버전 시작
            cd current
            pm2 start pnpm --name "ttimate" -- start
            pm2 save
            
            # Nginx 설정 확인 및 재로드 (필요시)
            sudo nginx -t && sudo systemctl reload nginx || echo "Nginx reload skipped"
            
            echo "🚀 띠메이트 배포 완료!"
            echo "서버 상태:"
            pm2 list
          EOF

      - name: 배포 상태 확인
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # 헬스체크
            sleep 10
            if curl -f http://localhost:3001 > /dev/null 2>&1; then
              echo "✅ 애플리케이션이 정상적으로 실행 중입니다."
            else
              echo "❌ 애플리케이션 실행에 문제가 있습니다."
              pm2 logs ttimate --lines 50
              exit 1
            fi
          EOF

      - name: 배포 완료 알림
        if: success()
        run: |
          echo "🎉 띠메이트 배포가 성공적으로 완료되었습니다!"
          echo "사이트: ${{ secrets.NEXT_PUBLIC_SITE_URL }}"
          echo "시간: $(date '+%Y-%m-%d %H:%M:%S')"

      - name: 배포 실패 시 롤백
        if: failure()
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /var/www/ttimate
            echo "❌ 배포 실패! 이전 버전으로 롤백합니다..."
            
            # 가장 최근 백업으로 롤백
            LATEST_BACKUP=$(ls -t backup/ | head -n 1)
            if [ -n "$LATEST_BACKUP" ]; then
              pm2 delete ttimate 2>/dev/null || true
              rm -rf current
              cp -r backup/$LATEST_BACKUP current
              cd current
              pm2 start pnpm --name "ttimate" -- start
              pm2 save
              echo "✅ 롤백 완료: $LATEST_BACKUP"
            else
              echo "❌ 롤백할 백업이 없습니다."
            fi
          EOF

      - name: 정리
        if: always()
        run: |
          rm -f private_key.pem ttimate-build.tar.gz