name: 띠메이트 배포

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  test:
    name: 테스트 실행
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: pnpm 설정
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 의존성 설치
        run: pnpm install --frozen-lockfile

      - name: 타입 체크
        run: pnpm run type-check

      - name: 린트 체크
        run: pnpm run lint --max-warnings=0 || true

      - name: 빌드 테스트
        run: pnpm run build

  build-and-deploy:
    name: 빌드 및 배포
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')

    env:
      NEXT_PUBLIC_KAKAO_KEY: ${{ secrets.NEXT_PUBLIC_KAKAO_KEY }}
      NEXT_PUBLIC_GOOGLE_ADSENSE_ID: ${{ secrets.NEXT_PUBLIC_GOOGLE_ADSENSE_ID }}
      NEXT_PUBLIC_GA_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_GA_MEASUREMENT_ID }}
      NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: pnpm 설정
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 의존성 설치
        run: pnpm install --frozen-lockfile

      - name: Next.js 빌드
        run: pnpm run build

      - name: 빌드 파일 패키징
        run: |
          # 필요한 파일만 패키징하여 업로드 속도 향상
          echo "📦 패키징할 파일 확인..."
          ls -la package.json pnpm-lock.yaml next.config.ts
          ls -la .next/ public/

          echo "📄 package.json 내용 검증:"
          echo "파일 크기: $(wc -c < package.json) bytes"
          head -3 package.json

          tar -czf ttimate-build.tar.gz \
            --exclude='.next/cache' \
            --exclude='node_modules' \
            .next \
            public \
            package.json \
            pnpm-lock.yaml \
            next.config.ts

          echo "✅ 패키징 완료 - 파일 크기: $(du -h ttimate-build.tar.gz | cut -f1)"

          echo "📦 압축 파일 내용 검증:"
          tar -tzf ttimate-build.tar.gz | grep -E "(package\.json|pnpm-lock\.yaml)" || echo "⚠️ 필수 파일이 압축에 포함되지 않았습니다!"

      - name: SSH 키 설정
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 --decode > private_key.pem
          chmod 600 private_key.pem

      - name: EC2 서버 준비
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # 디스크 공간 확인
            echo "💾 디스크 사용량 확인:"
            df -h /var/www/ || df -h /
            
            # 애플리케이션 디렉토리 생성
            sudo mkdir -p /var/www/ttimate
            sudo chown -R $USER:$USER /var/www/ttimate
            
            # 권한 확인
            echo "🔒 디렉토리 권한 확인:"
            ls -ld /var/www/ttimate
            
            # 백업 디렉토리 생성
            mkdir -p /var/www/ttimate/backup
            
            # 임시 파일 정리 (공간 확보)
            echo "🧹 임시 파일 정리..."
            rm -f /var/www/ttimate/*.tar.gz
            rm -rf /var/www/ttimate/new_version
            
            # 현재 실행 중인 앱 백업 (rollback용)
            if [ -d "/var/www/ttimate/current" ]; then
              cp -r /var/www/ttimate/current /var/www/ttimate/backup/$(date +%Y%m%d_%H%M%S)
              # 오래된 백업 정리 (최근 3개만 유지 - 공간 절약)
              ls -t /var/www/ttimate/backup/ | tail -n +4 | xargs -r rm -rf
            fi
            
            # 정리 후 디스크 공간 재확인
            echo "💾 정리 후 디스크 사용량:"
            df -h /var/www/ || df -h /
          EOF

      - name: 빌드 파일 업로드
        run: |
          echo "📤 빌드 파일 업로드 중..."
          echo "파일 크기: $(du -h ttimate-build.tar.gz | cut -f1)"

          # 재시도 로직을 포함한 SCP 업로드
          max_attempts=3
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "업로드 시도 $attempt/$max_attempts"
            
            if scp -v -i private_key.pem -o StrictHostKeyChecking=no ttimate-build.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/ttimate/; then
              echo "✅ 업로드 성공!"
              break
            else
              echo "❌ 업로드 실패 (시도 $attempt/$max_attempts)"
              if [ $attempt -eq $max_attempts ]; then
                echo "최대 재시도 횟수 도달. 업로드 실패."
                exit 1
              fi
              echo "5초 후 재시도..."
              sleep 5
              attempt=$((attempt + 1))
            fi
          done

      - name: EC2에서 배포 실행
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /var/www/ttimate
            
            # 새 버전 디렉토리 생성
            rm -rf new_version
            mkdir new_version
            
            # 빌드 파일 압축 해제
            echo "📦 압축 파일 내용 확인:"
            tar -tzf ttimate-build.tar.gz | head -10
            
            echo "📂 압축 해제 중..."
            tar -xzf ttimate-build.tar.gz -C new_version/
            
            echo "📋 압축 해제 후 파일 확인:"
            ls -la new_version/
            
            echo "📄 package.json 내용 확인:"
            if [ -f "new_version/package.json" ]; then
              echo "package.json 파일 크기: $(wc -c < new_version/package.json) bytes"
              head -5 new_version/package.json
            else
              echo "❌ package.json 파일이 없습니다!"
              exit 1
            fi
            
            rm ttimate-build.tar.gz
            
            # Node.js 환경 설정
            echo "🔧 Node.js 환경 설정 중..."
            export NVM_DIR="$HOME/.nvm"
            
            # NVM 로드
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              \. "$NVM_DIR/nvm.sh"
              echo "✅ NVM 로드 완료"
            else
              echo "⚠️ NVM이 설치되지 않았습니다. 시스템 Node.js 사용"
            fi
            
            # Node.js 버전 확인/설치
            if command -v nvm > /dev/null 2>&1; then
              nvm use 20 2>/dev/null || nvm install 20
            fi
            
            # Node.js 확인
            node --version || echo "❌ Node.js를 찾을 수 없습니다"
            
            # pnpm 설정 (권한 오류 방지)
            echo "🔧 pnpm 환경 설정 중..."
            if command -v corepack > /dev/null 2>&1; then
              corepack enable 2>/dev/null || echo "⚠️ corepack enable 실패 (권한 문제)"
              corepack prepare pnpm@9 --activate 2>/dev/null || echo "⚠️ corepack prepare 실패"
            fi
            
            # pnpm 경로 설정
            export PNPM_HOME="$HOME/.local/share/pnpm"
            export PATH="$PNPM_HOME:$PATH"
            
            # pnpm 버전 확인
            pnpm --version || echo "❌ pnpm을 찾을 수 없습니다"
            
            # 새 버전에 의존성 설치 (운영용만)
            cd new_version
            
            # package.json 존재 및 내용 확인
            if [ ! -f "package.json" ]; then
              echo "❌ package.json 파일이 없습니다!"
              ls -la
              exit 1
            fi
            
            # package.json 파일이 비어있는지 확인
            if [ ! -s "package.json" ]; then
              echo "❌ package.json 파일이 비어있습니다!"
              echo "파일 크기: $(wc -c < package.json) bytes"
              ls -la package.json
              exit 1
            fi
            
            # JSON 유효성 검사
            if ! node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))" 2>/dev/null; then
              echo "❌ package.json이 유효한 JSON 형식이 아닙니다!"
              echo "파일 내용:"
              cat package.json | head -10
              exit 1
            fi
            
            echo "✅ package.json 검증 완료"
            echo "파일 크기: $(wc -c < package.json) bytes"
            
            pnpm install --prod --frozen-lockfile
            
            # 환경 변수 파일 생성
            cat > .env.local << 'ENVEOF'
            NEXT_PUBLIC_KAKAO_KEY=${{ secrets.NEXT_PUBLIC_KAKAO_KEY }}
            NEXT_PUBLIC_GOOGLE_ADSENSE_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_ADSENSE_ID }}
            NEXT_PUBLIC_GA_MEASUREMENT_ID=${{ secrets.NEXT_PUBLIC_GA_MEASUREMENT_ID }}
            NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}
            NODE_ENV=production
            PORT=3001
            ENVEOF
            
            cd /var/www/ttimate
            
            # PM2로 애플리케이션 관리
            pm2 delete ttimate 2>/dev/null || true
            
            # 심볼릭 링크 업데이트 (무중단 배포)
            rm -rf current
            mv new_version current
            
            # PM2로 새 버전 시작
            cd current
            PORT=3001 pm2 start pnpm --name "ttimate" -- start
            pm2 save
            
            # Nginx 설정 확인 및 재로드 (필요시)
            sudo nginx -t && sudo systemctl reload nginx || echo "Nginx reload skipped"
            
            echo "🚀 띠메이트 배포 완료!"
            echo "서버 상태:"
            pm2 list
          EOF

      - name: 정리
        if: always()
        run: |
          rm -f private_key.pem ttimate-build.tar.gz
